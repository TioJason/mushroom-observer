#!/usr/bin/env ruby
#
#  USAGE::
#
#    script/make_eol_xml <output.xml>
#
#  DESCRIPTION::
#
#  Write the contents of name/eol into a named file.
#
################################################################################

require "tempfile"
require "net/http"
require "erb"
include ERB::Util

##### methods ##################################################################

class ParsedUrl
  def initialize(url)
    @url = url
    @m = url.match(/^http:\/\/([\w\.]+)(:[0-9]+)*(.*)$/)
  end

  attr_reader :url

  def local_url
    @m[3]
  end

  def host
    @m[1]
  end

  def port
    p = @m[2]
    p ? p[1..-1].to_i : 80
  end
end

def get_parsed_url
  localhost = ParsedUrl.new(LOCAL_URL)
  if test_host(localhost.host, localhost.port)
    localhost
  else
    ParsedUrl.new(REMOTE_URL)
  end
end

def test_host(host, port)
  result = false
  begin
    Net::HTTP.start(host, port) do |_http|
      result = true
    end
  rescue Exception => err
  end
  result
end

def get_content(filename, url)
  cmd = "wget -q -O #{filename} '#{url}'"
  system cmd
end

def get_size(filename)
  File.exist?(filename) ? File::Stat.new(filename).size : 0
end

def testing
  ENV["RAILS_ENV"] == "test"
end

################################################################################

if testing
  LOCAL_URL = "http://localhost:3000/api/observations?id=1"
  REMOTE_URL = "http://mushroomobserver.org/api/observations?id=1"
else
  LOCAL_URL = "http://localhost:3000/name/eol"
  REMOTE_URL = "http://mushroomobserver.org/name/eol"
end

temp_file = Tempfile.new("eol")
temp_filename = temp_file.path
dest_filename = ARGV[0]

if testing
  # Mock response because real MO website blocks robots
  File.open(temp_filename, "w") do |file|
    file.puts "Mock eol file content: "
    file.puts '<results number="1">'
  end
else
  get_content(temp_filename, get_parsed_url.url)
end

new_size = get_size(temp_filename)
old_size = get_size(dest_filename)

if !new_size
  print "Unable to create the new EOL dump as #{temp_filename}.\n"
  exit 1
elsif new_size < old_size * 0.9
  print "Size of new EOL dump, #{new_size}, was less than 90% of the old dump, #{old_size}.\n"
  print "Left the old file in place.\n"
  exit 1
else
  File.rename(temp_filename, dest_filename)
  File.chmod(0644, dest_filename)
  exit 0
end
